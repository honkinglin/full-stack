# 定义服务部分，每个服务代表一个容器化的应用
services:
  # 定义 MySQL 服务
  mysql:
    # 使用最新版本的 MySQL 官方 Docker 镜像
    image: mysql:latest
    # 为 MySQL 容器指定名称，方便后续管理和操作
    container_name: oa-mysql
    # 设置容器的重启策略为总是重启，确保 MySQL 服务的高可用性
    restart: always
    # 配置 MySQL 容器的环境变量
    environment:
      # 设置 MySQL 的 root 用户密码
      MYSQL_ROOT_PASSWORD: "123456"
      # 在 MySQL 实例启动时，自动创建一个名为 your_database_name 的数据库
      MYSQL_DATABASE: oa
    # 端口映射，将容器内的 3306 端口映射到宿主机的 3306 端口，以便外部访问 MySQL 服务
    ports:
      - "3306:3306"
    networks:
      - app-network
    # 配置数据卷，实现 MySQL 数据的持久化存储
    volumes:
      # 使用命名数据卷 mysql-data，将其挂载到容器内的 /var/lib/mysql 目录（MySQL 存储数据的默认目录）
      - mysql-data:/var/lib/mysql
      # 将本地的 sql 文件夹挂载到容器内的 /docker-entrypoint-initdb.d 目录
      - ./sql:/docker-entrypoint-initdb.d

  # 定义 Tomcat 服务，用于运行 Java 项目
  tomcat:
    # 构建自定义的 Tomcat 镜像
    build:
      # 指定构建上下文为当前目录
      context: .
      # 指定使用的 Dockerfile 文件
      dockerfile: Dockerfile
    # 为 Tomcat 容器指定名称
    container_name: oa-tomcat
    # 设置容器的重启策略为总是重启，保证 Tomcat 服务的稳定性
    restart: always
    # 端口映射，将容器内的 8080 端口映射到宿主机的 8080 端口，以便访问 Java 应用
    ports:
      - "8080:8080"
    # 定义服务依赖关系，确保在启动 Tomcat 服务之前，MySQL 服务已经启动
    depends_on:
      - mysql
    environment:
      DB_HOST: oa-mysql  # 通过环境变量传递 MySQL 容器名称
      DB_PORT: 3306
      DB_NAME: oa
      DB_USER: root
      DB_PASSWORD: "123456"
    networks:
      - app-network

# # 定义数据卷部分，用于持久化存储数据
volumes:
  # 定义名为 mysql-data 的命名数据卷
  mysql-data:

networks:
  app-network:
    driver: bridge
